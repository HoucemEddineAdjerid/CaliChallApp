/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { RequirementService } from "../requirement.service";
import { RequirementCreateInput } from "./RequirementCreateInput";
import { Requirement } from "./Requirement";
import { RequirementFindManyArgs } from "./RequirementFindManyArgs";
import { RequirementWhereUniqueInput } from "./RequirementWhereUniqueInput";
import { RequirementUpdateInput } from "./RequirementUpdateInput";

export class RequirementControllerBase {
  constructor(protected readonly service: RequirementService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: Requirement })
  async createRequirement(
    @common.Body() data: RequirementCreateInput
  ): Promise<Requirement> {
    return await this.service.createRequirement({
      data: data,
      select: {
        createdAt: true,
        id: true,
        updatedAt: true,
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [Requirement] })
  @ApiNestedQuery(RequirementFindManyArgs)
  async requirements(@common.Req() request: Request): Promise<Requirement[]> {
    const args = plainToClass(RequirementFindManyArgs, request.query);
    return this.service.requirements({
      ...args,
      select: {
        createdAt: true,
        id: true,
        updatedAt: true,
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: Requirement })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async requirement(
    @common.Param() params: RequirementWhereUniqueInput
  ): Promise<Requirement | null> {
    const result = await this.service.requirement({
      where: params,
      select: {
        createdAt: true,
        id: true,
        updatedAt: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: Requirement })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updateRequirement(
    @common.Param() params: RequirementWhereUniqueInput,
    @common.Body() data: RequirementUpdateInput
  ): Promise<Requirement | null> {
    try {
      return await this.service.updateRequirement({
        where: params,
        data: data,
        select: {
          createdAt: true,
          id: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: Requirement })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deleteRequirement(
    @common.Param() params: RequirementWhereUniqueInput
  ): Promise<Requirement | null> {
    try {
      return await this.service.deleteRequirement({
        where: params,
        select: {
          createdAt: true,
          id: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }
}
