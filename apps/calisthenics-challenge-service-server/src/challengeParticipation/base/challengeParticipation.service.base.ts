/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";
import {
  Prisma,
  ChallengeParticipation as PrismaChallengeParticipation,
} from "@prisma/client";

export class ChallengeParticipationServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(
    args: Omit<Prisma.ChallengeParticipationCountArgs, "select">
  ): Promise<number> {
    return this.prisma.challengeParticipation.count(args);
  }

  async challengeParticipations<
    T extends Prisma.ChallengeParticipationFindManyArgs
  >(
    args: Prisma.SelectSubset<T, Prisma.ChallengeParticipationFindManyArgs>
  ): Promise<PrismaChallengeParticipation[]> {
    return this.prisma.challengeParticipation.findMany<Prisma.ChallengeParticipationFindManyArgs>(
      args
    );
  }
  async challengeParticipation<
    T extends Prisma.ChallengeParticipationFindUniqueArgs
  >(
    args: Prisma.SelectSubset<T, Prisma.ChallengeParticipationFindUniqueArgs>
  ): Promise<PrismaChallengeParticipation | null> {
    return this.prisma.challengeParticipation.findUnique(args);
  }
  async createChallengeParticipation<
    T extends Prisma.ChallengeParticipationCreateArgs
  >(
    args: Prisma.SelectSubset<T, Prisma.ChallengeParticipationCreateArgs>
  ): Promise<PrismaChallengeParticipation> {
    return this.prisma.challengeParticipation.create<T>(args);
  }
  async updateChallengeParticipation<
    T extends Prisma.ChallengeParticipationUpdateArgs
  >(
    args: Prisma.SelectSubset<T, Prisma.ChallengeParticipationUpdateArgs>
  ): Promise<PrismaChallengeParticipation> {
    return this.prisma.challengeParticipation.update<T>(args);
  }
  async deleteChallengeParticipation<
    T extends Prisma.ChallengeParticipationDeleteArgs
  >(
    args: Prisma.SelectSubset<T, Prisma.ChallengeParticipationDeleteArgs>
  ): Promise<PrismaChallengeParticipation> {
    return this.prisma.challengeParticipation.delete(args);
  }
}
