/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { ChallengeParticipationService } from "../challengeParticipation.service";
import { ChallengeParticipationCreateInput } from "./ChallengeParticipationCreateInput";
import { ChallengeParticipation } from "./ChallengeParticipation";
import { ChallengeParticipationFindManyArgs } from "./ChallengeParticipationFindManyArgs";
import { ChallengeParticipationWhereUniqueInput } from "./ChallengeParticipationWhereUniqueInput";
import { ChallengeParticipationUpdateInput } from "./ChallengeParticipationUpdateInput";

export class ChallengeParticipationControllerBase {
  constructor(protected readonly service: ChallengeParticipationService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: ChallengeParticipation })
  async createChallengeParticipation(
    @common.Body() data: ChallengeParticipationCreateInput
  ): Promise<ChallengeParticipation> {
    return await this.service.createChallengeParticipation({
      data: data,
      select: {
        createdAt: true,
        id: true,
        updatedAt: true,
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [ChallengeParticipation] })
  @ApiNestedQuery(ChallengeParticipationFindManyArgs)
  async challengeParticipations(
    @common.Req() request: Request
  ): Promise<ChallengeParticipation[]> {
    const args = plainToClass(
      ChallengeParticipationFindManyArgs,
      request.query
    );
    return this.service.challengeParticipations({
      ...args,
      select: {
        createdAt: true,
        id: true,
        updatedAt: true,
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: ChallengeParticipation })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async challengeParticipation(
    @common.Param() params: ChallengeParticipationWhereUniqueInput
  ): Promise<ChallengeParticipation | null> {
    const result = await this.service.challengeParticipation({
      where: params,
      select: {
        createdAt: true,
        id: true,
        updatedAt: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: ChallengeParticipation })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updateChallengeParticipation(
    @common.Param() params: ChallengeParticipationWhereUniqueInput,
    @common.Body() data: ChallengeParticipationUpdateInput
  ): Promise<ChallengeParticipation | null> {
    try {
      return await this.service.updateChallengeParticipation({
        where: params,
        data: data,
        select: {
          createdAt: true,
          id: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: ChallengeParticipation })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deleteChallengeParticipation(
    @common.Param() params: ChallengeParticipationWhereUniqueInput
  ): Promise<ChallengeParticipation | null> {
    try {
      return await this.service.deleteChallengeParticipation({
        where: params,
        select: {
          createdAt: true,
          id: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }
}
