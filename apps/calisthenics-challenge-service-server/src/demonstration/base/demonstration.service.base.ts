/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";
import { Prisma, Demonstration as PrismaDemonstration } from "@prisma/client";

export class DemonstrationServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(
    args: Omit<Prisma.DemonstrationCountArgs, "select">
  ): Promise<number> {
    return this.prisma.demonstration.count(args);
  }

  async demonstrations<T extends Prisma.DemonstrationFindManyArgs>(
    args: Prisma.SelectSubset<T, Prisma.DemonstrationFindManyArgs>
  ): Promise<PrismaDemonstration[]> {
    return this.prisma.demonstration.findMany<Prisma.DemonstrationFindManyArgs>(
      args
    );
  }
  async demonstration<T extends Prisma.DemonstrationFindUniqueArgs>(
    args: Prisma.SelectSubset<T, Prisma.DemonstrationFindUniqueArgs>
  ): Promise<PrismaDemonstration | null> {
    return this.prisma.demonstration.findUnique(args);
  }
  async createDemonstration<T extends Prisma.DemonstrationCreateArgs>(
    args: Prisma.SelectSubset<T, Prisma.DemonstrationCreateArgs>
  ): Promise<PrismaDemonstration> {
    return this.prisma.demonstration.create<T>(args);
  }
  async updateDemonstration<T extends Prisma.DemonstrationUpdateArgs>(
    args: Prisma.SelectSubset<T, Prisma.DemonstrationUpdateArgs>
  ): Promise<PrismaDemonstration> {
    return this.prisma.demonstration.update<T>(args);
  }
  async deleteDemonstration<T extends Prisma.DemonstrationDeleteArgs>(
    args: Prisma.SelectSubset<T, Prisma.DemonstrationDeleteArgs>
  ): Promise<PrismaDemonstration> {
    return this.prisma.demonstration.delete(args);
  }
}
