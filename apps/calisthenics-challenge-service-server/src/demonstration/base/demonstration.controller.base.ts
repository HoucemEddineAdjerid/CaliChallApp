/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { DemonstrationService } from "../demonstration.service";
import { DemonstrationCreateInput } from "./DemonstrationCreateInput";
import { Demonstration } from "./Demonstration";
import { DemonstrationFindManyArgs } from "./DemonstrationFindManyArgs";
import { DemonstrationWhereUniqueInput } from "./DemonstrationWhereUniqueInput";
import { DemonstrationUpdateInput } from "./DemonstrationUpdateInput";

export class DemonstrationControllerBase {
  constructor(protected readonly service: DemonstrationService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: Demonstration })
  async createDemonstration(
    @common.Body() data: DemonstrationCreateInput
  ): Promise<Demonstration> {
    return await this.service.createDemonstration({
      data: data,
      select: {
        createdAt: true,
        id: true,
        updatedAt: true,
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [Demonstration] })
  @ApiNestedQuery(DemonstrationFindManyArgs)
  async demonstrations(
    @common.Req() request: Request
  ): Promise<Demonstration[]> {
    const args = plainToClass(DemonstrationFindManyArgs, request.query);
    return this.service.demonstrations({
      ...args,
      select: {
        createdAt: true,
        id: true,
        updatedAt: true,
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: Demonstration })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async demonstration(
    @common.Param() params: DemonstrationWhereUniqueInput
  ): Promise<Demonstration | null> {
    const result = await this.service.demonstration({
      where: params,
      select: {
        createdAt: true,
        id: true,
        updatedAt: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: Demonstration })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updateDemonstration(
    @common.Param() params: DemonstrationWhereUniqueInput,
    @common.Body() data: DemonstrationUpdateInput
  ): Promise<Demonstration | null> {
    try {
      return await this.service.updateDemonstration({
        where: params,
        data: data,
        select: {
          createdAt: true,
          id: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: Demonstration })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deleteDemonstration(
    @common.Param() params: DemonstrationWhereUniqueInput
  ): Promise<Demonstration | null> {
    try {
      return await this.service.deleteDemonstration({
        where: params,
        select: {
          createdAt: true,
          id: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }
}
